/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TiffBoxDialog.java
 *
 * Created on Sep 13, 2011, 8:14:15 PM
 */
package net.sourceforge.tessboxeditor;

import java.awt.*;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.font.*;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.*;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import net.sourceforge.tessboxeditor.datamodel.TessBox;
import net.sourceforge.tessboxeditor.datamodel.TessBoxCollection;
import net.sourceforge.vietpad.components.FontDialog;
import net.sourceforge.vietpad.components.SimpleFilter;

public class TiffBoxDialog extends javax.swing.JDialog {

    static final String EOL = System.getProperty("line.separator");
    private LineBreakMeasurer lineMeasurer;
    // the first character in the paragraph.
    private int paragraphStart;
    // the first character after the end of the paragraph.
    private int paragraphEnd;
    private final Hashtable<TextAttribute, Object> map = new Hashtable<TextAttribute, Object>();
    private AttributedString astr;
    private int margin = 20;
    private List<TessBoxCollection> boxPages = new ArrayList<TessBoxCollection>();
    private List<BufferedImage> imageList = new ArrayList<BufferedImage>();

    /** Creates new form TiffBoxDialog */
    public TiffBoxDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        setLocationRelativeTo(getOwner());

        //  Handle escape key to hide the dialog
        KeyStroke escapeKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
        Action escapeAction =
                new AbstractAction() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        setVisible(false);
                    }
                };
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeKeyStroke, "ESCAPE");
        getRootPane().getActionMap().put("ESCAPE", escapeAction);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        FileFilter textFilter = new SimpleFilter("txt", "Text Files");
        jFileChooser1.addChoosableFileFilter(textFilter);
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jToolBar1 = new javax.swing.JToolBar();
        jButtonInput = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jButtonFont = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabelW = new javax.swing.JLabel();
        jSpinnerW = new javax.swing.JSpinner();
        jLabelH = new javax.swing.JLabel();
        jSpinnerH = new javax.swing.JSpinner();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jButtonGenerate = new javax.swing.JButton();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jButtonClear = new javax.swing.JButton();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setTitle("Generate TIFF/Box");
        setMinimumSize(new java.awt.Dimension(550, 400));

        jToolBar1.setRollover(true);

        jButtonInput.setText("Input");
        jButtonInput.setToolTipText("Load Text File");
        jButtonInput.setFocusable(false);
        jButtonInput.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonInput.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInputActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonInput);
        jToolBar1.add(filler3);

        jButtonFont.setText("Font");
        jButtonFont.setToolTipText("Select Font");
        jButtonFont.setFocusable(false);
        jButtonFont.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFont.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFontActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFont);
        jToolBar1.add(filler5);

        jLabelW.setText("Width");
        jLabelW.setToolTipText("Image Width");
        jToolBar1.add(jLabelW);

        jSpinnerW.setModel(new javax.swing.SpinnerNumberModel(600, 300, 1000, 1));
        jSpinnerW.setPreferredSize(new java.awt.Dimension(55, 20));
        jToolBar1.add(jSpinnerW);

        jLabelH.setText("Height");
        jLabelH.setToolTipText("Image Height");
        jToolBar1.add(jLabelH);

        jSpinnerH.setModel(new javax.swing.SpinnerNumberModel(400, 200, 1000, 1));
        jSpinnerH.setPreferredSize(new java.awt.Dimension(55, 20));
        jToolBar1.add(jSpinnerH);
        jToolBar1.add(filler4);

        jButtonGenerate.setText("Generate");
        jButtonGenerate.setToolTipText("Generate TIFF/Box");
        jButtonGenerate.setFocusable(false);
        jButtonGenerate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonGenerate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonGenerate);
        jToolBar1.add(filler7);

        jButtonClear.setText("Clear");
        jButtonClear.setToolTipText("Clear Textarea");
        jButtonClear.setFocusable(false);
        jButtonClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonClear);
        jToolBar1.add(filler6);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setMargin(new java.awt.Insets(5, 5, 2, 2));
        jScrollPane1.setViewportView(jTextArea1);
        this.jButtonFont.setText(fontDesc(this.jTextArea1.getFont()));
        // DnD support
        new DropTarget(this.jTextArea1, new FileDropTargetListener(TiffBoxDialog.this));

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInputActionPerformed
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            openFile(jFileChooser1.getSelectedFile());
        }
    }//GEN-LAST:event_jButtonInputActionPerformed

    void openFile(final File selectedFile) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(selectedFile), "UTF8"));
            this.jTextArea1.read(in, null);
            in.close();
        } catch (IOException e) {
        }
    }

    private void jButtonFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFontActionPerformed
        FontDialog dlg = new FontDialog((JFrame) this.getParent());
        Font font = this.jTextArea1.getFont();
        dlg.setAttributes(font);
        dlg.setVisible(true);

        if (dlg.succeeded()) {
            font = dlg.getFont();
            this.jTextArea1.setFont(font);
            this.jTextArea1.validate();
            this.jButtonFont.setText(fontDesc(font));
        }
    }//GEN-LAST:event_jButtonFontActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        this.jTextArea1.setText(null);
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        if (this.jTextArea1.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "Please load some text.");
            return;
        }

        imageList.clear();
        drawImage();
        saveImageBox();
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    public void drawImage() {
        map.put(TextAttribute.FONT, this.jTextArea1.getFont());
        astr = new AttributedString(this.jTextArea1.getText(), map);
        AttributedCharacterIterator paragraph = astr.getIterator();
        paragraphStart = paragraph.getBeginIndex();
        paragraphEnd = paragraph.getEndIndex();


        BufferedImage bi = new BufferedImage((Integer) this.jSpinnerW.getValue(), (Integer) this.jSpinnerH.getValue(), BufferedImage.TYPE_BYTE_GRAY);
        Graphics2D g2 = bi.createGraphics();
//        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON); //VALUE_TEXT_ANTIALIAS_LCD_HRGB
        // Set formatting width to width of Component.
        g2.setBackground(Color.white);
        g2.clearRect(0, 0, bi.getWidth(), bi.getHeight());
        g2.setColor(Color.black);
        Font font = this.jTextArea1.getFont();
        g2.setFont(font);
        float formatWidth = bi.getWidth(); // - 2 * margin;
        float drawPosY = margin;
        // Create a new LineBreakMeasurer from the paragraph.
        lineMeasurer = new LineBreakMeasurer(paragraph, g2.getFontRenderContext());
        lineMeasurer.setPosition(paragraphStart);

        // Get lines from lineMeasurer until the entire
        // paragraph has been displayed.
        while (lineMeasurer.getPosition() < paragraphEnd) {
            // Retrieve next layout.
            TextLayout layout = lineMeasurer.nextLayout(formatWidth);
            // Move y-coordinate by the ascent of the layout.
            drawPosY += layout.getAscent();
            // Compute pen x position. If the paragraph is
            // right-to-left, we want to align the TextLayouts
            // to the right edge of the panel.
            float drawPosX = layout.isLeftToRight()
                    ? margin : formatWidth - layout.getAdvance();
            // Draw the TextLayout at (drawPosX, drawPosY).
            layout.draw(g2, drawPosX, drawPosY);
            // Move y-coordinate in preparation for next layout.
            drawPosY += layout.getDescent() + layout.getLeading();
        }

        boxPages.clear();
        TessBoxCollection boxCol = new TessBoxCollection();

        String text = this.jTextArea1.getText();
        // get the visual center of the component.
        int centerX = bi.getWidth() / 2;
        int centerY = bi.getHeight() / 2;

// get the bounds of the string to draw.
        FontMetrics fontMetrics = g2.getFontMetrics();
        Rectangle stringBounds = fontMetrics.getStringBounds(text, g2).getBounds();

// get the visual bounds of the text using a GlyphVector.

        FontRenderContext renderContext = g2.getFontRenderContext();
        GlyphVector glyphVector = font.createGlyphVector(renderContext, text);
        Rectangle visualBounds = glyphVector.getVisualBounds().getBounds();
//        Rectangle pixelBounds = glyphVector.getPixelBounds(renderContext, drawPosY, drawPosY).getBounds();
        int num = glyphVector.getNumGlyphs();

// calculate the lower left point at which to draw the string. note that this we
// give the graphics context the y corridinate at which we want the baseline to
// be placed. use the visual bounds height to center on in conjuction with the
// position returned in the visual bounds. the vertical position given back in the
// visualBounds is a negative offset from the basline of the text.
        int textX = centerX - stringBounds.width / 2;
        int textY = centerY - visualBounds.height / 2 - visualBounds.y;

        for (int i = 0; i < num; i++) {
            Point2D p = glyphVector.getGlyphPosition(i);
//            Shape s = glyphVector.getGlyphOutline(i);
//            Shape s = glyphVector.getGlyphLogicalBounds(i);
//             Shape s = glyphVector.getGlyphOutline(i, (float) p.getX(), (float) p.getY());
//            Rectangle s = glyphVector.getGlyphPixelBounds(i, null, (float) p.getX(), (float) p.getY());
            Shape s = glyphVector.getGlyphVisualBounds(i); // too wide
            GlyphMetrics metrics = glyphVector.getGlyphMetrics(i);
//            graphics2D.draw(s);
            int glyphX = (int) p.getX() + textX + (int) metrics.getLSB();
            int glyphY = (int) p.getY() + textY + s.getBounds().y;
            int glyphW = (int) metrics.getBounds2D().getWidth();
            int glyphH = (int) metrics.getBounds2D().getHeight();
            short page = 0;
            String chrs = String.valueOf(text.charAt(i));

            g2.drawRect(glyphX, glyphY, glyphW, glyphH);
//            graphics2D.drawRect((int)p.getX()+textX, (int)p.getY() + textY -s.getBounds().height, s.getBounds().width, s.getBounds().height);

            if (!chrs.equals(" ")) {
                boxCol.add(new TessBox(chrs, new Rectangle(glyphX, glyphY, glyphW, glyphH), page));
//                boxess.add(String.format("%s %d %d %d %d 0", chrs, glyphX, size.height - glyphY - glyphH, glyphX + glyphW, size.height - glyphY));
            }
        }
        this.boxPages.add(boxCol);
//        g2.drawString(text, textX, textY);
//        graphics2D.drawRect(textX, textY - (int) pixelBounds.getHeight(), (int) pixelBounds.getWidth(), (int) pixelBounds.getHeight());
        g2.dispose();
        imageList.add(bi);
    }

    String formatOutputString() {
        StringBuilder sb = new StringBuilder();
        for (short i = 0; i < imageList.size(); i++) {
            BufferedImage bi = imageList.get(i);
            int pageHeight = bi.getHeight(); // each page (in an image) can have different height
            for (TessBox box : boxPages.get(i).toList()) {
                Rectangle rect = box.getRect();
//                tightenBoundingBox(rect, bi);
                sb.append(String.format("%s %d %d %d %d %d", box.getChrs(), rect.x, pageHeight - rect.y - rect.height, rect.x + rect.width, pageHeight - rect.y, i)).append(EOL);
            }
        }
//        if (isTess2_0Format) {
//            return sb.toString().replace(" 0" + EOL, EOL); // strip the ending zeroes
//        }
        return sb.toString();
    }

    void saveImageBox() {
        BufferedImage bi = imageList.get(0);

        try {
            ImageIO.write(bi, "png", new File("test.png"));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("test.box"), "UTF8"));
            out.write(formatOutputString());
            out.close();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }

    private String fontDesc(Font font) {
        return font.getName() + (font.isBold() ? " Bold" : "") + (font.isItalic() ? " Italic" : "") + " " + font.getSize() + "pt";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TiffBoxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TiffBoxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TiffBoxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TiffBoxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                TiffBoxDialog dialog = new TiffBoxDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonFont;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonInput;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabelH;
    private javax.swing.JLabel jLabelW;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerH;
    private javax.swing.JSpinner jSpinnerW;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
